@model Event.Data.Objects.Entities.Vendor
@{
    ViewBag.Title = "Register";
    ViewBag.Header = "Vendor Registration";
    Layout = "../Shared/Layout/_LayoutOutterForm.cshtml";
    long? packageId = ViewBag.packageId;
}
<div class="col-md-12 profile-dashboard">
    <div class="row">
        <div class="col-md-12 dashboard-form">
            <div class="bg-white pinside40 mb30">
                @using (Html.BeginForm("Register", "Vendors", FormMethod.Post, new {enctype = "multipart/form-data", @class = "form-horizontal"}))
                {
                    @Html.Hidden("packageId", packageId)
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new {@class = "text-danger"})
                    <h2 class="form-title">Upload Logo</h2>
                    <!-- File Button -->
                    <div class="form-group">
                        <div class="col-md-4">
                            <div class="photo-upload">
                                <img src="~/Content/AppTheme/images/avatar.jpg" alt="" id="avatar" width="220px" height="250px">
                            </div>
                        </div>
                        <div class="col-md-8 upload-file">
                            <input id="filebutton" name="filebutton" class="input-file" type="file">
                        </div>
                    </div>
                    <!-- Text input-->
                    <h2 class="form-title">Vendor Profile</h2>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, new {@class = "col-md-4 control-label"})
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Name, new {htmlAttributes = new {@class = "form-control input-md", placeholder = "Enter Name"}})
                            @Html.ValidationMessageFor(model => model.Name, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.LocationId, "Location", new {@class = "col-md-4 control-label"})
                        <div class="col-md-8">
                            @Html.DropDownListFor(m => m.LocationId, null, "Select Location", new {@class = "form-control input-md"})
                            @Html.ValidationMessageFor(model => model.LocationId, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Address, new {@class = "col-md-4 control-label"})
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Address, new {htmlAttributes = new {@class = "form-control input-md", placeholder = "Enter Valid Address"}})
                            @Html.ValidationMessageFor(model => model.Address, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Email, new {@class = "col-md-4 control-label"})
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Email, new {htmlAttributes = new {@class = "form-control input-md", placeholder = "Enter Valid Email Address"}})
                            @Html.ValidationMessageFor(model => model.Email, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Mobile, new {@class = "col-md-4 control-label"})
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Mobile, new {htmlAttributes = new {@class = "form-control input-md", placeholder = "Enter Valid Mobile Number"}})
                            @Html.ValidationMessageFor(model => model.Mobile, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.VendorServiceId, "Vendor Service", new {@class = "col-md-4 control-label"})
                        <div class="col-md-8">
                            @Html.DropDownListFor(m => m.VendorServiceId, null, "Select Service Rendered", new {@class = "form-control input-md"})
                            @Html.ValidationMessageFor(model => model.VendorServiceId, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Password, new {@class = "col-md-4 control-label"})
                        <div class="col-md-8">
                            @Html.PasswordFor(model => model.Password, new {@class = "form-control input-md", placeholder = "Enter Password"})
                            @Html.ValidationMessageFor(model => model.Password, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ConfirmPassword, new {@class = "col-md-4 control-label"})
                        <div class="col-md-8">
                            @Html.PasswordFor(model => model.ConfirmPassword, new {@class = "form-control input-md", placeholder = "Confirm Password"})
                            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-4">
                            <input type="submit" value="Next" class="btn btn-primary"/>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
@section scripts
{
    <script>
    function payWithPaystack() {
        var handler = window.PaystackPop.setup({
            key: 'pk_test_d19305d69eba56904f42be1c7a8a1fa0259f0760',
            email: 'salxsaa@gmail.com',
            amount: 500,
            ref: "",
            metadata: {
                custom_fields: [
                    {
                        display_name: "Mobile Number",
                        variable_name: "mobile_number",
                        value: "+2348114675635"
                    }
                ]
            },
            callback: function(response) {
                ConfirmPayment();
                alert('success. transaction ref is ' + response.reference);
            },
            onClose: function() {
                alert('window closed');
            }
        });
        handler.openIframe();
    }

    function ConfirmPayment() {
        $.ajax({
            url: '@Url.Action("ConfirmPayment", "Vendors")',
            type: 'GET',
            dataType: 'json',
            // we set cache: false because GET requests are often cached by browsers
            // IE is particularly aggressive in that respect
            cache: false
        });
    }


</script>
<!-- jQuery read image data and show preview code -->
<script type="text/javascript">
    $(document).ready(function () {
        //Image file input change event
        $("#filebutton").change(function () {
            readImageData(this);//Call image read and render function
        });
    });

    function readImageData(imgData) {
        if (imgData.files && imgData.files[0]) {
            var readerObj = new FileReader();

            readerObj.onload = function (element) {
                $('#avatar').attr('src', element.target.result);
            }

            readerObj.readAsDataURL(imgData.files[0]);
        }
    }
</script>

}
