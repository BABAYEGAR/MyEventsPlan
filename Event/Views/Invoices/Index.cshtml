@using Event.Data.Objects.Entities
@using MyEventPlan.Data.DataContext.DataContext
@model IEnumerable<Invoice>
@{

    ViewBag.Title = "List";
    long? eventId = ViewBag.id;
    if (eventId != null)
    {
        ViewBag.TableHeader = "My Invoices";
        ViewBag.TableSubHeader = "List of all my Event Invoices";
    }
    else
    {
        ViewBag.TableHeader = "My Invoices";
        ViewBag.TableSubHeader = "List of all my Invoices";
    }

    Layout = "../Shared/Layout/_LayoutTable.cshtml";
    var invoice = new Invoice();
    var db = new EventDataContext();
    var loggedinuser = Session["myeventplanloggedinuser"] as AppUser;

    var invoiceAmount = new List<long>();
    var paymentAmount = new List<long>();
    foreach (var items in db.InvoiceItems.Where(n => n.CreatedBy == loggedinuser.AppUserId))
    {
        var unitAmount = items.UnitCost * items.Quantity;
        invoiceAmount.Add(unitAmount);
    }
    foreach (var items in db.InvoicePayments.Where(n => n.CreatedBy == loggedinuser.AppUserId))
    {
        if (items.Amount != null)
        {
            var unitAmount = (long) items.Amount;
            paymentAmount.Add(unitAmount);
        }
    }
    var totalInvoicedAmount = invoiceAmount.Sum();
    var totalPaymentAmount = paymentAmount.Sum();
    var remainingAmount = totalInvoicedAmount - totalPaymentAmount;
}
@section topSection{
    <div class="content">
        <div class="container-fluid">
            <div class="col-lg-4 col-md-4 col-sm-4" style="background-color: rgb(223, 137, 137);">
                <div class="card card-stats"style="background-color: rgb(223, 137, 137); color: white">
                    <div class="card-content">
                        <p class="category"></p>
                        <h4 class="title pull-left">
                            Total Invoices
                        </h4>
                        <br/>
                        <br/>
                        <h1 class="pull-left">N @(String.Format("{0:n0}", @totalInvoicedAmount))</h1>

                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-md-4 col-sm-4" style="background-color: rgb(128, 199, 128)">
                <div class="card card-stats"style="background-color: rgb(128, 199, 128); color: white">
                    <div class="card-content">
                        <p class="category"></p>
                        <h4 class="title pull-left">
                            Total Payments
                        </h4>
                        <br/>
                        <br/>
                        <h1 class="pull-left">N @(String.Format("{0:n0}", @totalPaymentAmount))</h1>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-md-4 col-sm-4" style="background-color: rgb(243, 238, 185);">
                <div class="card card-stats"style="background-color: rgb(243, 238, 185); color: white">
                    <div class="card-content">
                        <p class="category"></p>
                        <h4 class="title pull-left">
                            Remaining Balances
                        </h4>
                        <br/>
                        <br/>
                        <h1 class="pull-left">N @(String.Format("{0:n0}", @remainingAmount))</h1>
                    </div>

                </div>
            </div>
        </div>
    </div>
}


@section links{
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="@Url.Action("Dashboard", "Home")">My Dashboard</a>
        </li>
    </ol>
}
@section add {
    <!-- Button trigger modal -->
    <button type="button" class="btn btn-primary  fa fa-plus pull-right" data-toggle="modal" data-target="#myModal">
        Add Invoice
    </button>

    <!-- Modal -->
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title" id="myModalLabel">Add an Invoice</h4>
                </div>
                <div class="modal-body">
                    @{
                        Html.RenderPartial("EventPlanning/CreateInvoiceModal", invoice);
                    }
                </div>
            </div>
        </div>

    </div>
}
<div class="card-content table-responsive">
    <table class="table table-hover" id="grid1">
        <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.InvoiceName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.InvoiceNumber)
            </th>
            <th>
                @Html.DisplayName("Client/Owner")
            </th>
            <th>
                @Html.DisplayName("Amount")
            </th>
            <th>
                @Html.DisplayName("Paid")
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DueDate)
            </th>
            <th>Action</th>
        </tr>
        </thead>
        <tfoot>
        <tr>
            <th colspan="4" style="text-align: left">Total:</th>
            <th></th>
        </tr>
        </tfoot>
        <tbody>
        @foreach (var item in Model)
        {
            var invoiceItems = db.InvoiceItems.Where(n => n.InvoiceId == item.InvoiceId);
            var invoicedAmount = new List<long>();
            var paymentsAmount = new List<long>();
            foreach (var items in invoiceItems)
            {
                var unitAmount = items.UnitCost * items.Quantity;
                invoicedAmount.Add(unitAmount);
            }
            foreach (var items in db.InvoicePayments.Where(n => n.InvoiceId == item.InvoiceId))
            {
                if (items.Amount != null)
                {
                    var unitAmount = (long) items.Amount;
                    paymentsAmount.Add(unitAmount);
                }
            }
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.InvoiceName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.InvoiceNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Client.Name)
                </td>
                <td>
                    @(String.Format("{0:n0}", @invoicedAmount.Sum()))
                </td>
                <td>
                    @(String.Format("{0:n0}", @paymentsAmount.Sum()))
                </td>
                <td>
                    @item.DueDate.ToShortDateString()
                </td>
                <td>
                    @Html.ActionLink("Open", "Details", new {id = item.InvoiceId}, new {@class = "btn btn-default btn-lg fa fa-folder-open"})

                </td>
            </tr>
        }
        </tbody>
    </table>
</div>
@section scripts
{
    <script>
        $(document).ready(function() {
            $('#grid1').DataTable({
                "footerCallback": function(row, data, start, end, display) {
                    var api = this.api(), data;

                    // Remove the formatting to get integer data for summation
                    var intVal = function(i) {
                        return typeof i === 'string' ? i.replace(/[\$,]/g, '') * 1 : typeof i === 'number' ? i : 0;
                    };

                    // Total over all pages
                    total = api
                        .column(3)
                        .data()
                        .reduce(function(a, b) {
                                return intVal(a) + intVal(b);
                            },
                            0);

                    // Total over this page
                    pageTotal = api
                        .column(3, { page: 'current' })
                        .data()
                        .reduce(function(a, b) {
                                return intVal(a) + intVal(b);
                            },
                            0);

                    // Update footer
                    $(api.column(3).footer()).html(
                        'N' + pageTotal + ' ( N' + total + ' Total Invoices Amount)',
                    );
                }
            });
        });

    </script>
}