@using Event.Data.Objects.Entities
@using MyEventPlan.Data.DataContext.DataContext
@using MyEventPlan.Data.Service.Enum
@model Event
@{
    var db = new EventDataContext();

    ViewBag.Title = "Calendar";
    ViewBag.Header = "My Events Calendar";
    Layout = "../Shared/_LayoutCalendar.cshtml";

    AppUser loggedinuser = null;
    loggedinuser = Session["myeventplanloggedinuser"] as AppUser;

    var role = Session["role"] as Role;
    ViewBag.EventTypeId = new SelectList(db.EventTypes, "EventTypeId", "Name");
}
@section css{
    <link href="~/Content/themes/base/jquery.ui.core.css" rel="stylesheet"/>
    <link href="~/Content/themes/base/jquery.ui.resizable.css" rel="stylesheet"/>
    <link href="~/Content/themes/base/jquery.ui.selectable.css" rel="stylesheet"/>
    <link href="~/Content/themes/base/jquery.ui.accordion.css" rel="stylesheet"/>
    <link href="~/Content/themes/base/jquery.ui.autocomplete.css" rel="stylesheet"/>
    <link href="~/Content/themes/base/jquery.ui.button.css" rel="stylesheet"/>
    <link href="~/Content/themes/base/jquery.ui.dialog.css" rel="stylesheet"/>
    <link href="~/Content/themes/base/jquery.ui.slider.css" rel="stylesheet"/>
    <link href="~/Content/themes/base/jquery.ui.tabs.css" rel="stylesheet"/>
    <link href="~/Content/themes/base/jquery.ui.progressbar.css" rel="stylesheet"/>
    <link href="~/Content/themes/base/jquery.ui.theme.css" rel="stylesheet"/>
    <link href="~/Content/DateTimePicker/jquery.datetimepicker.min.css" rel="stylesheet"/>
    <link href="~/Content/Color/spectrum.css" rel="stylesheet"/>
}
@Html.ActionLink("Add Event", "Create", "Events", new {}, new {@class = "btn btn-primary icon-plus pull-right"})

@if ((loggedinuser != null) && (role != null))
{
    if (TempData["event"] != null)
    {
        if (TempData["notificationtype"].Equals(NotificationType.Success.ToString()))
        {
            <div class="alert alert-success alert-dismissable">@TempData["event"]</div>
        }
        else if (TempData["notificationtype"].Equals(NotificationType.Error.ToString()))
        {
            <div class="alert alert-danger alert-dismissable">@TempData["event"]</div>
        }
        else if (TempData["notificationtype"].Equals(NotificationType.Info.ToString()))
        {
            <div class="alert alert-info alert-dismissable">@TempData["event"]</div>
        }
    }
    <div id="popupUpdateEventForm" class="modal" style="display: none;">
        @using (Html.BeginForm("UpdateCalendarEvent", "Events", FormMethod.Post, new {enctype = "multipart/form-data", @class = "form-horizontal row-fluid", id = "UpdateEventForm"}))
        {
            <div class="modal-header">
                <h3>Update Event</h3>
            </div>
            <div class="modal-body">
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.EventId, new {id = "eventId"})
                @Html.ValidationSummary(true, "", new {@class = "text-danger"})
                <div class="control-group">
                    @Html.LabelFor(model => model.Name, new {@class = "control-label"})
                    <div class="controls">
                        @Html.EditorFor(model => model.Name, new {htmlAttributes = new {@class = "span8", id = "eventTitles"}})
                        @Html.ValidationMessageFor(model => model.Name, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="control-group">
                    @Html.LabelFor(model => model.Color, new {@class = "control-label"})
                    <div class="controls">
                        @Html.EditorFor(model => model.Color, new {htmlAttributes = new {@class = "span8", id = "eventColors"}})
                        @Html.ValidationMessageFor(model => model.Color, "", new {@class = "text-danger"})
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(model => model.StartDate, new {@class = "control-label"})
                    <div class="controls">
                        @Html.TextBoxFor(model => model.StartDate, new {@class = "span8", id = "eventStartDates"})
                        @Html.ValidationMessageFor(model => model.StartDate, "", new {@class = "text-danger"})
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(model => model.EndDate, new {@class = "control-label"})
                    <div class="controls">
                        @Html.EditorFor(model => model.EndDate, new {htmlAttributes = new {@class = "span8", id = "eventEndDates"}})
                        @Html.ValidationMessageFor(model => model.EndDate, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="btnPopupUpdateCancel" data-dismiss="modal" class="btn btn-default pull-left fa fa-stop">Cancel</button>
                <input type="submit" value="Update Event" class="btn btn-primary pull-left fa fa-arro"/>
            </div>
        }
    </div>


    <div id="popupSaveEventForm" class="modal" style="display: none;">

        @using (Html.BeginForm("UpdateEvent", "Events", FormMethod.Post, new {enctype = "multipart/form-data", @class = "form-horizontal row-fluid"}))
        {
            <div class="modal-header">
                <h3>Add new event</h3>
            </div>
            <div class="modal-body">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new {@class = "text-danger"})
                <div class="control-group">
                    @Html.LabelFor(model => model.Name, new {@class = "control-label"})
                    <div class="controls">
                        @Html.EditorFor(model => model.Name, new {htmlAttributes = new {@class = "span8", id = "eventTitle"}})
                        @Html.ValidationMessageFor(model => model.Name, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="control-group">
                    @Html.LabelFor(model => model.Color, new {@class = "control-label"})
                    <div class="controls">
                        @Html.EditorFor(model => model.Color, new {htmlAttributes = new {@class = "span8 jscolor", id = "eventColor"}})
                        @Html.ValidationMessageFor(model => model.Color, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="control-group">
                    @Html.LabelFor(model => model.EventTypeId, "Event Type", new {@class = "control-label"})
                    <div class="controls">
                        @Html.DropDownList("EventTypeId", null, new {@class = "span8", id = "eventType"})
                        @Html.ValidationMessageFor(model => model.EventTypeId, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="control-group">
                    @Html.LabelFor(model => model.TargetBudget, new {@class = "control-label"})
                    <div class="controls">
                        @Html.EditorFor(model => model.TargetBudget, new {htmlAttributes = new {@class = "span8", id = "eventBudget"}})
                        @Html.ValidationMessageFor(model => model.TargetBudget, "", new {@class = "text-danger"})
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(model => model.EventDate, new {@class = "control-label"})
                    <div class="controls">
                        @Html.TextBoxFor(model => model.EventDate, new {@class = "span8", id = "eventDate"})
                        @Html.ValidationMessageFor(model => model.EventDate, "", new {@class = "text-danger"})
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(model => model.StartDate, new {@class = "control-label"})
                    <div class="controls">
                        @Html.TextBoxFor(model => model.StartDate, new {@class = "span8", id = "eventStartDate"})
                        @Html.ValidationMessageFor(model => model.StartDate, "", new {@class = "text-danger"})
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(model => model.EndDate, new {@class = "control-label"})
                    <div class="controls">
                        @Html.EditorFor(model => model.EndDate, new {htmlAttributes = new {@class = "span8", id = "eventEndDate"}})
                        @Html.ValidationMessageFor(model => model.EndDate, "", new {@class = "text-danger"})
                    </div>
                </div>

            </div>
        }
        <div class="modal-footer">
            <button type="button" id="btnPopupNewCancel" data-dismiss="modal" class="btn btn-default">Cancel</button>
            <button type="button" id="btnPopupSave" data-dismiss="modal" class="btn btn-primary">Save event</button>
        </div>
    </div>
    <div class="panel-body">
        <div id="calendar" class="monthly">
        </div>
    </div>
}
@section scripts{
    <script src="~/Content/DateTimePicker/jquery.datetimepicker.full.min.js"></script>
    <script src="~/Content/Color/spectrum.js"></script>
    <script type="text/javascript">

        $.datetimepicker.setLocale('en');
        jQuery('#eventDate')
            .datetimepicker({
                format: 'm-d-Y',
                onShow: function(ct) {
                    this.setOptions({
                        minDate: 0
                    });

                },
                timepicker: false
            });
        jQuery('#eventStartDate')
            .datetimepicker({
                format: 'm-d-Y H:i',
                onShow: function(ct) {
                    this.setOptions({
                        minDate: 0
                    });
                }
            });
        jQuery('#eventEndDate')
            .datetimepicker({
                format: 'm-d-Y H:i',
                onShow: function(ct) {
                    this.setOptions({
                        minDate: jQuery('#eventStartDate').val()
                    });
                }
            });
        jQuery('#eventStartDates')
            .datetimepicker({
                format: 'm-d-Y H:i',
                onShow: function(ct) {
                    this.setOptions({
                    
                    });
                }
            });
        jQuery('#eventEndDates')
            .datetimepicker({
                format: 'm-d-Y H:i',
                onShow: function(ct) {
                    this.setOptions({
                    
                    });
                }
            });

        $("#eventColor")
            .spectrum({
                preferredFormat: "hex"
            });
        $("#eventColors")
            .spectrum({
                preferredFormat: "hex"
            });


        $('input.number')
            .keyup(function(event) {

                if (event.which >= 37 && event.which <= 40) {
                    event.preventDefault();
                }
                var $this = $(this);
                var num = $this.val().replace(/,/g, '');
                // the following line has been simplified. Revision history contains original.
                $this.val(num.replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,"));
            });
    </script>

    <script>
        $(document)
            .ready(function() {
                $('#calendar')
                    .fullCalendar({
                        header: {
                            left: 'prev,next today',
                            center: 'title',
                            right: 'month,agendaWeek,agendaDay'
                        },
                        defaultView: 'month',
                        editable: true,
                        allDaySlot: false,
                        timezone: 'local',
                        selectable: true,
                        slotMinutes: 15,
                        events: '@Url.Action("GetMyEvents", "Events")',
                        eventClick: function(event, jsEvent, view) {
                            ShowUpdateEventPopup(event);

                        },

                        eventDrop: function(event, dayDelta, minuteDelta, allDay, revertFunc) {
                            if (confirm("Confirm move?")) {
                                UpdateEvent(event.id, event.start, event.end);
                            } else {
                                revertFunc();
                            }
                        },

                        eventResize: function(event, dayDelta, minuteDelta, revertFunc) {

                            if (confirm("Confirm change appointment length?")) {
                                UpdateEvent(event.id, event.start, event.end);
                            } else {
                                revertFunc();
                            }
                        },


                        dayClick: function(date, jsEvent, view) {
                            ShowNewEventPopup(date);
                        }

                    });
            });

        $('#btnPopupUpdateCancel')
            .click(function() {
                ClearPopupFormValues();
                $('#popupUpdateEventForm').hide();
            });
        $('#btnPopupNewCancel')
            .click(function() {
                ClearPopupFormValues();
                $('#popupSaveEventForm').hide();
            });

        //save a new event
        $('#btnPopupSave')
            .click(function() {
                $('#popupSaveEventForm').hide();

                var dataRow = {
                    'Title': $('#eventTitle').val(),
                    'NewEventStartDate': $('#eventStartDate').val(),
                    'NewEventEndDate': $('#eventEndDate').val(),
                    'Color': $('#eventColor').val(),
                    'Budget': $('#eventBudget').val(),
                    'plannerId': @loggedinuser.EventPlannerId,
                    'type': $('#eventType').val(),
                    'eventDate': $('#eventDate').val(),
                    'appUserId': @loggedinuser.AppUserId,
                };
                ClearPopupFormValues();

                $.ajax({
                    type: 'POST',
                    url: "@Url.Action("CreateNewEvent", "Events")",
                    data: dataRow,
                    success: function(response) {
                        if (response === 'True') {
                            $('#calendar').fullCalendar('refetchEvents');
                            alert('New event saved!');
                        } else {
                            alert('Error, could not save event!');
                        }
                    }
                });
            });


        //update event
        $('#btnPopupUpdate')
            .click(function() {
                $('#popupUpdateEventForm').hide();

                if (confirm("Confirm move?")) {
                    UpdateEvent(event.id, event.start, event.end);
                } else {
                    window.revertFunc();
                }
            });

        function ShowUpdateEventPopup(event) {
            ClearPopupFormValues();
            $('#popupUpdateEventForm').fadeIn();
            $('#eventTitles').val(event.title);
            $('#eventColors').val(event.color);
            $("#eventColors")
                .spectrum({
                    color: event.color,
                    preferredFormat: "hex"
                });
            $('#eventStartDates').val((event.start).format('M/D/Y HH:mm'));
            $('#eventEndDates').val(event.end.format('M/D/Y HH:mm'));
            $('#eventId').val(event.id);
        }

        function ShowNewEventPopup(date) {
            ClearPopupFormValues();
            $('#popupSaveEventForm').fadeIn();
            $('#eventStartDate').val(date.format('M/D/Y HH:mm'));
        }

        function ClearPopupFormValues() {
            $('#eventID').val("");
            $('#eventTitle').val("");
            $('#eventDateTime').val("");
            $('#eventDuration').val("");
        }

        function UpdateEvent(eventId, eventStart, eventEnd) {

            var dataRow = {
                'ID': eventId,
                'NewEventStart': eventStart,
                'NewEventEnd': eventEnd
            };
            $.ajax({
                type: 'POST',
                url: "@Url.Action("UpdateEvent", "Events")",
                dataType: "json",
                contentType: "application/json",
                data: JSON.stringify(dataRow)
            });

        }
    </script>

}